{"version":3,"sources":["images/dm_logo.png","ui_components/AuthFrame.js","authentication/SignIn.js","authentication/SignUp.js","authentication/ForgetPassword.js","authentication/VerifSignInDialog.js","authentication/VerifForgetPasswordDialog.js","App.js","authentication/DmAuthenticator.js","languages/DmIntlProvider.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","root","backgroundColor","padding","props","classes","children","react_default","a","createElement","Paper_default","elevation","SignIn","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTextChange","event","setState","defineProperty","target","id","value","handleClickShowPassword","showPassword","state","clearError","emailErrorMsg","passwordErrorMsg","email","password","prevProps","errorObj","errObject","code","message","_this2","core_index_es","container","direction","spacing","item","Typography_default","variant","color","index_es","alignItems","xs","icons_index_es","label","type","error","helperText","fullWidth","onInput","onChange","htmlFor","endAdornment","position","aria-label","onClick","awsSignIn","justify","changeState","changeLanguage","Component","SignUp","usernameErrorMsg","username","includes","awsSignUp","ForgetPassword","awsForgetPassword","VerifSignInDialog","codeErrorMsg","handleClose","disableBackdropClick","disableEscapeKeyDown","open","onExit","aria-labelledby","autoFocus","awsResendCode","awsVerifyCode","VerifForgetPasswordDialog","lg","awsVerifyPasswordCode","App","awsSignOut","Amplify","configure","AWS_Config","DmAuthenticator","signIn","Auth","then","user","authuser","catch","err","childError","signUp","trim","length","attributes","name","data","showVerifCodeDialog","signOut","forgetPassword","forgotPassword","forgetPsEmail","showVerifPasswordCodeDialog","resentSignUpCode","resendSignUp","verificationSignInError","verifySignUpCode","confirmSignUp","authState","verifyForgetPasswordCode","newPassword","forgotPasswordSubmit","verificationForgetPsError","targetAuthState","checkUserLogin","currentAuthenticatedUser","authUser","className","Grid_default","xl","src","dmLogo","alt","ui_components_AuthFrame","authObject","authentication_SignIn","authentication_SignUp","authentication_ForgetPassword","src_App_0","authentication_VerifSignInDialog","authentication_VerifForgetPasswordDialog","DmIntlProvider","addLocaleData","toConsumableArray","en","concat","zh","ja","locale","messages","intlMessagesEN","bind","assertThisInitialized","langCode","document","getElementsByTagName","setAttribute","intlMessagesZH","intlMessagesJA","React","cloneElement","Boolean","window","location","hostname","match","theme","createMuiTheme","DMTheme","ReactDOM","render","styles","languages_DmIntlProvider","authentication_DmAuthenticator","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41205590.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dm_logo.605740b1.png\";","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n        padding: '30px'\r\n    }\r\n};\r\n\r\nfunction AuthFrame(props) {\r\n    const { classes, children } = props;\r\n\r\n    return (\r\n        <Paper classes={{root: classes.root}} elevation={1}>\r\n          { children }\r\n        </Paper>\r\n      );\r\n}\r\nexport default withStyles(styles)(AuthFrame);","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Button, TextField, Input, InputLabel, InputAdornment, IconButton, FormControl, FormHelperText } from '@material-ui/core';\r\nimport { Lock, Visibility, VisibilityOff, AccountCircle } from '@material-ui/icons';\r\n\r\nclass SignIn extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            emailErrorMsg: \"\",\r\n            password: '',\r\n            passwordErrorMsg: \"\",\r\n            showPassword: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        let errorObj = this.props.errObject;\r\n        if(errorObj && errorObj !== prevProps.errObject)\r\n        {\r\n            if(errorObj === \"Username cannot be empty\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email cannot be empty\"});\r\n            }\r\n            else if(errorObj.code === \"UserNotFoundException\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email does not exist\"});\r\n            }\r\n            else if(errorObj.code === \"UserNotConfirmedException\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Account is not confirmed\"});\r\n            }\r\n            else if(errorObj.code === \"NotAuthorizedException\") \r\n            {\r\n                this.setState({passwordErrorMsg: \"Incorrect password\"});\r\n            }\r\n            else if(errorObj.code === \"UnexpectedLambdaException\") \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password cannot be empty\"});\r\n            }\r\n            else\r\n            {\r\n                this.setState({emailErrorMsg: errorObj.message});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange = event =>\r\n    {\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState({ showPassword: !this.state.showPassword });\r\n    };\r\n\r\n    clearError = (event) => {\r\n        if(event.target.id === \"email\")\r\n        {\r\n            this.setState({ emailErrorMsg: ''});\r\n        }\r\n        else if(event.target.id === \"password\")\r\n        {\r\n            this.setState({ passwordErrorMsg: ''});\r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <form>\r\n                <Grid container direction=\"column\" spacing={16}>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\"><FormattedMessage id=\"titleSignIn\"/></Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <AccountCircle />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField id=\"email\"\r\n                                    label={<FormattedMessage id=\"txtEmail\"/>}\r\n                                    type=\"email\"\r\n                                    value={this.state.email}\r\n                                    error={this.state.emailErrorMsg !== \"\"}\r\n                                    helperText={this.state.emailErrorMsg}\r\n                                    fullWidth={true}\r\n                                    onInput={(event) => this.clearError(event)}\r\n                                    onChange={(event) => this.handleTextChange(event)}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <Lock />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <FormControl fullWidth={true} error={this.state.passwordErrorMsg !== \"\"}>\r\n                                    <InputLabel htmlFor=\"password\"><FormattedMessage id=\"txtPassword\"/></InputLabel>\r\n                                    <Input \r\n                                        id=\"password\"\r\n                                        type={this.state.showPassword ? 'text' : 'password'}\r\n                                        value={this.state.password}\r\n                                        onInput={(event) => this.clearError(event)}\r\n                                        onChange={(event) => this.handleTextChange(event)}\r\n                                        endAdornment=\r\n                                        {\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"Toggle password visibility\"\r\n                                                    onClick={this.handleClickShowPassword}>\r\n                                                    {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }/>\r\n                                        {this.state.passwordErrorMsg !== '' && <FormHelperText>{this.state.passwordErrorMsg}</FormHelperText>}\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={() => this.props.awsSignIn(this.state.email, this.state.password)} ><FormattedMessage id=\"btnSignIn\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container justify=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeState(\"forgetPassword\")}><FormattedMessage id=\"btnForgetPassword\"/></Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeState(\"signUp\")}><FormattedMessage id=\"btnCreateAccount\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container justify=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeLanguage(\"en\")}>EN</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeLanguage(\"zh\")}>ZH</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeLanguage(\"ja\")}>JA</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React, { Component } from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Button, TextField, Input, InputLabel, InputAdornment, IconButton, FormControl, FormHelperText } from '@material-ui/core';\r\nimport { Lock, Visibility, VisibilityOff, Email, AccountCircle  } from '@material-ui/icons';\r\n\r\nclass SignUp extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            emailErrorMsg: \"\",\r\n            username: \"\",\r\n            usernameErrorMsg: \"\",\r\n            password: \"\",\r\n            passwordErrorMsg: \"\",\r\n            showPassword: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        let errorObj = this.props.errObject;\r\n        if(errorObj && errorObj !== prevProps.errObject)\r\n        {\r\n            if(errorObj.code === \"EmptyUserException\") \r\n            {\r\n                this.setState({usernameErrorMsg: \"Username cannot be empty\"});\r\n            }\r\n            else if(errorObj === \"Username cannot be empty\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email cannot be empty\"});\r\n            }\r\n            else if(errorObj.code === \"UsernameExistsException\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email already in used\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidParameterException\" && errorObj.message.includes(\"Invalid email\")) \r\n            {\r\n                this.setState({emailErrorMsg: \"Invalid email address format.\"});\r\n            }\r\n            else if(errorObj === \"Password cannot be empty\") \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password cannot be empty\"});\r\n            }\r\n            else if(errorObj.message.includes(\"equal to 6\") || errorObj.message.includes(\"long enough\"))\r\n            {\r\n                this.setState({passwordErrorMsg: \"Password length must at least has 8 characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"uppercase\")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have uppercase characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"lowercase\")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have lowercase characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"numeric \")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have numeric characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"symbol \")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have symbol characters\"});\r\n            }\r\n            else\r\n            {\r\n                this.setState({emailErrorMsg: errorObj.message});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange = event => {\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState({ showPassword: !this.state.showPassword });\r\n    };\r\n\r\n    clearError = (event) => {\r\n        if(event.target.id === \"email\")\r\n        {\r\n            this.setState({ emailErrorMsg: ''});\r\n        }\r\n        else if(event.target.id === \"username\")\r\n        {\r\n            this.setState({ usernameErrorMsg: ''});\r\n        }\r\n        else if(event.target.id === \"password\")\r\n        {\r\n            this.setState({ passwordErrorMsg: ''});\r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <form>\r\n                <Grid container direction=\"column\" spacing={16}>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\"><FormattedMessage id=\"titleSignUp\"/></Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <Email />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField id=\"email\"\r\n                                    label={<FormattedMessage id=\"txtEmail\"/>}\r\n                                    type=\"email\"\r\n                                    value={this.state.email}\r\n                                    error={this.state.emailErrorMsg !== \"\"}\r\n                                    helperText={this.state.emailErrorMsg}\r\n                                    fullWidth={true}\r\n                                    onInput={(event) => this.clearError(event)}\r\n                                    onChange={(event) => this.handleTextChange(event)}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <AccountCircle />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField id=\"username\"\r\n                                    label={<FormattedMessage id=\"txtUsername\"/>}\r\n                                    type=\"text\"\r\n                                    value={this.state.username}\r\n                                    error={this.state.usernameErrorMsg !== \"\"}\r\n                                    helperText={this.state.usernameErrorMsg}\r\n                                    fullWidth={true}\r\n                                    onInput={(event) => this.clearError(event)}\r\n                                    onChange={(event) => this.handleTextChange(event)}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <Lock />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <FormControl fullWidth={true} error={this.state.passwordErrorMsg !== \"\"}>\r\n                                    <InputLabel htmlFor=\"password\"><FormattedMessage id=\"txtPassword\"/></InputLabel>\r\n                                    <Input \r\n                                        id=\"password\"\r\n                                        type={this.state.showPassword ? 'text' : 'password'}\r\n                                        value={this.state.password}\r\n                                        onInput={(event) => this.clearError(event)}\r\n                                        onChange={(event) => this.handleTextChange(event)}\r\n                                        endAdornment=\r\n                                        {\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"Toggle password visibility\"\r\n                                                    onClick={this.handleClickShowPassword}>\r\n                                                    {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }/>\r\n                                        {this.state.passwordErrorMsg !== \"\" && <FormHelperText>{this.state.passwordErrorMsg}</FormHelperText>}\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Button variant=\"contained\" color=\"primary\" fullWidth={true} \r\n                                    onClick={() => this.props.awsSignUp(this.state.email, this.state.username, this.state.password)} ><FormattedMessage id=\"titleSignUp\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container justify=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeState(\"signIn\")}><FormattedMessage id=\"btnSignInInstead\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField, Grid, Button } from '@material-ui/core';\r\nimport { AccountCircle  } from '@material-ui/icons';\r\n\r\nclass ForgetPassword extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            emailErrorMsg: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        let errorObj = this.props.errObject;\r\n        if(errorObj && errorObj !== prevProps.errObject)\r\n        {\r\n            if(errorObj === \"Username cannot be empty\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email cannot be empty\"});\r\n            }\r\n            else if(errorObj.code === \"UserNotFoundException\") \r\n            {\r\n                this.setState({emailErrorMsg: \"Email does not exist\"});\r\n            }\r\n            else\r\n            {\r\n                this.setState({emailErrorMsg: errorObj.message});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange(event)\r\n    {\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n\r\n    clearError = (event) => {\r\n        this.setState({ emailErrorMsg: ''});\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <form>\r\n                <Grid container direction=\"column\" spacing={16}>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\"><FormattedMessage id=\"titleForgetPassword\"/></Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container alignItems=\"flex-end\">\r\n                            <Grid item xs={2}>\r\n                                <AccountCircle />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField id=\"email\"\r\n                                    label={<FormattedMessage id=\"txtEmail\"/>}\r\n                                    type=\"email\"\r\n                                    value={this.state.email}\r\n                                    error={this.state.emailErrorMsg !== \"\"}\r\n                                    helperText={this.state.emailErrorMsg}\r\n                                    fullWidth={true}\r\n                                    onInput={(event) => this.clearError(event)}\r\n                                    onChange={(event) => this.handleTextChange(event)}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={() => this.props.awsForgetPassword(this.state.email)}><FormattedMessage id=\"btnGetNewPassword\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container justify=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button color=\"primary\" onClick={() => this.props.changeState(\"signIn\")}><FormattedMessage id=\"btnSignInInstead\"/></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ForgetPassword;","import React, { Component } from 'react';\r\nimport { Button, TextField, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText } from '@material-ui/core';\r\n\r\nclass VerifSignInDialog extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            code: '',\r\n            codeErrorMsg: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        let errorObj = this.props.errObject;\r\n        if(errorObj && errorObj !== prevProps.errObject)\r\n        {\r\n                this.setState({codeErrorMsg: \"Invalid verification code provided, please try again\"});\r\n            if(errorObj === \"Code cannot be empty\") \r\n            {\r\n                this.setState({codeErrorMsg: \"Code cannot be empty\"});\r\n            }\r\n            else if(errorObj.code === \"CodeMismatchException\") \r\n            {\r\n                this.setState({codeErrorMsg: \"Invalid verification code provided, please try again\"});\r\n            }\r\n            else\r\n            {\r\n                this.setState({codeErrorMsg: errorObj.message});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange(event)\r\n    {\r\n        this.setState({code: event.target.value});\r\n    }\r\n\r\n    clearError = (event) => {\r\n        this.setState({ codeErrorMsg: ''});\r\n    }\r\n\r\n    handleClose = () => {\r\n        //clear form\r\n        this.setState({\r\n            password: '',\r\n            passwordErrorMsg: \"\",\r\n            code: '',\r\n            codeErrorMsg: \"\",\r\n            showPassword: false\r\n        });\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <Dialog\r\n                disableBackdropClick\r\n                disableEscapeKeyDown\r\n                open={this.props.open}\r\n                onExit={() => this.handleClose()}\r\n                aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Enter Verification Code</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Verification code will send to your email soon. Please enter it in \r\n                        below text field.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        label=\"Verification Code\"\r\n                        value={this.state.code} \r\n                        error={this.state.codeErrorMsg !== \"\"}\r\n                        helperText={this.state.codeErrorMsg}\r\n                        fullWidth\r\n                        onInput={(event) => this.clearError(event)}\r\n                        onChange={(event) => this.handleTextChange(event)}/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => this.props.awsResendCode()} color=\"primary\">Resend Code</Button>\r\n                    <Button onClick={() => this.props.awsVerifyCode(this.state.code)} color=\"primary\">Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VerifSignInDialog;","import React, { Component } from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport { Grid, Input, InputLabel, InputAdornment, IconButton, FormControl, FormHelperText, Button, TextField, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\n\r\nclass VerifForgetPasswordDialog extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            password: '',\r\n            passwordErrorMsg: \"\",\r\n            code: '',\r\n            codeErrorMsg: \"\",\r\n            showPassword: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        let errorObj = this.props.errObject;\r\n        if(errorObj && errorObj !== prevProps.errObject)\r\n        {\r\n            if(errorObj === \"Code cannot be empty\") \r\n            {\r\n                this.setState({codeErrorMsg: \"Code cannot be empty\"});\r\n            }\r\n            else if(errorObj.code === \"CodeMismatchException\") \r\n            {\r\n                this.setState({codeErrorMsg: \"Invalid verification code provided, please try again.\"});\r\n            }\r\n            else if(errorObj === \"Password cannot be empty\") \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password cannot be empty\"});\r\n            }\r\n            else if(errorObj.message.includes(\"equal to 6\") || errorObj.message.includes(\"long enough\"))\r\n            {\r\n                this.setState({passwordErrorMsg: \"Password length must at least has 8 characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"uppercase\")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have uppercase characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"lowercase\")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have lowercase characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"numeric \")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have numeric characters\"});\r\n            }\r\n            else if(errorObj.code === \"InvalidPasswordException\" && errorObj.message.includes(\"symbol \")) \r\n            {\r\n                this.setState({passwordErrorMsg: \"Password must have symbol characters\"});\r\n            }\r\n            else\r\n            {\r\n                this.setState({codeErrorMsg: errorObj.message});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange(event)\r\n    {\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState({ showPassword: !this.state.showPassword });\r\n    };\r\n\r\n    clearError = (event) => {\r\n        if(event.target.id === \"password\")\r\n        {\r\n            this.setState({ passwordErrorMsg: ''});\r\n        }\r\n        else if(event.target.id === \"code\")\r\n        {\r\n            this.setState({ codeErrorMsg: ''});\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        //clear form\r\n        this.setState({\r\n            password: '',\r\n            passwordErrorMsg: \"\",\r\n            code: '',\r\n            codeErrorMsg: \"\",\r\n            showPassword: false\r\n        });\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <Dialog\r\n                disableBackdropClick\r\n                disableEscapeKeyDown\r\n                open={this.props.open}\r\n                onExit={() => this.handleClose()}\r\n                aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Enter New Password and Verification Code</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Verification code will send to your email soon. Please enter the new password and the code in \r\n                        below text field.\r\n                    </DialogContentText>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={12} lg={6}>\r\n                            <FormControl fullWidth={true} error={this.state.passwordErrorMsg !== \"\"}>\r\n                                <InputLabel htmlFor=\"password\"><FormattedMessage id=\"txtPassword\"/></InputLabel>\r\n                                <Input \r\n                                    id=\"password\"\r\n                                    type={this.state.showPassword ? 'text' : 'password'}\r\n                                    value={this.state.password}\r\n                                    onInput={(event) => this.clearError(event)}\r\n                                    onChange={(event) => this.handleTextChange(event)}\r\n                                    endAdornment=\r\n                                    {\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"Toggle password visibility\"\r\n                                                onClick={this.handleClickShowPassword}>\r\n                                                {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }/>\r\n                                    {this.state.passwordErrorMsg !== \"\" && <FormHelperText>{this.state.passwordErrorMsg}</FormHelperText>}\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={6}> \r\n                            <TextField id=\"code\"\r\n                                label=\"Verification Code\"\r\n                                value={this.state.code} \r\n                                error={this.state.codeErrorMsg !== \"\"}\r\n                                helperText={this.state.codeErrorMsg}\r\n                                fullWidth\r\n                                onInput={(event) => this.clearError(event)}\r\n                                onChange={(event) => this.handleTextChange(event)}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => this.props.awsVerifyPasswordCode(this.state.password, this.state.code)} color=\"primary\">Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VerifForgetPasswordDialog;","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Button  } from '@material-ui/core';\nimport './App.css';\n\nclass App extends Component \n{\n  render() {\n    return (\n      <div>\n        <Typography variant=\"h3\" color=\"textPrimary\">Welcome to Duel Masters</Typography>\n        <Button color=\"primary\" onClick={() => this.props.awsSignOut()}>Sign Out</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport dmLogo from '../images/dm_logo.png';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport AuthFrame from '../ui_components/AuthFrame';\r\nimport SignIn from './SignIn';\r\nimport SignUp from './SignUp';\r\nimport ForgetPassword from './ForgetPassword';\r\nimport VerifSignInDialog from './VerifSignInDialog';\r\nimport VerifForgetPasswordDialog from './VerifForgetPasswordDialog';\r\nimport App from '../App';\r\nimport AWS_Config from '../config/aws-config.json';\r\nAmplify.configure(AWS_Config);\r\n\r\nclass DmAuthenticator extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            authState: 'signIn',\r\n            authUser: null,\r\n            childError: null,\r\n            verificationSignInError: null,\r\n            verificationForgetPsError: null,\r\n            forgetPsEmail: '',\r\n            showVerifCodeDialog: false,\r\n            showVerifPasswordCodeDialog: false\r\n        };\r\n\r\n        this.checkUserLogin();\r\n    }\r\n\r\n    signIn = (email, password) => {\r\n        Auth.signIn(email, password)\r\n            .then(user => {\r\n                this.setState({authuser: user});\r\n                this.changeState('authenticated');\r\n            })\r\n            .catch(err => {\r\n                this.setState({childError: err})\r\n            });\r\n    }\r\n\r\n    signUp = (email, username, password) => {\r\n        if(username.trim().length === 0) //Amplify does not check email length\r\n        {\r\n            this.setState({childError: {code: \"EmptyUserException\"}})\r\n        }\r\n        else\r\n        {\r\n            Auth.signUp({\r\n                username: email,\r\n                password: password,\r\n                attributes: \r\n                {\r\n                    email: email,\r\n                    name: username\r\n                }\r\n            })\r\n            .then(data => {\r\n                // if success, system will send email with verification code\r\n                // show dialog for verification code input\r\n                this.setState({authuser: data.user, showVerifCodeDialog: true});\r\n            })\r\n            .catch(err => {\r\n                this.setState({childError: err})\r\n            });\r\n        }\r\n    }\r\n\r\n    signOut = () => {\r\n        Auth.signOut()\r\n            .then(data => {\r\n                this.changeState('signIn');\r\n            })\r\n    }\r\n\r\n    forgetPassword = (email) => {\r\n\r\n        // we only want to run when input does not look like email\r\n        Auth.forgotPassword(email)\r\n            .then(data => {\r\n                this.setState({forgetPsEmail: email, showVerifPasswordCodeDialog: true});\r\n            })\r\n            .catch(err => this.setState({childError: err}));\r\n    }\r\n\r\n    resentSignUpCode = () => {\r\n        Auth.resendSignUp(this.state.authuser.username)\r\n            .catch(err => this.setState({verificationSignInError: err}));\r\n    }\r\n\r\n    verifySignUpCode = (code) => {\r\n        Auth.confirmSignUp(this.state.authuser.username, code)\r\n            .then(data => {\r\n                this.setState({showVerifCodeDialog: false, authState: 'authenticated'});\r\n            })\r\n            .catch(err => this.setState({verificationSignInError: err}));\r\n    }\r\n\r\n    verifyForgetPasswordCode = (newPassword, code) => {\r\n        Auth.forgotPasswordSubmit(this.state.forgetPsEmail, code, newPassword)\r\n            .then(data => {\r\n                this.setState({showVerifPasswordCodeDialog: false, authState: 'signIn'});\r\n                this.changeState('signIn');\r\n            })\r\n            .catch(err => this.setState({verificationForgetPsError: err}));\r\n    }\r\n\r\n    changeState = (targetAuthState) => {\r\n        this.setState({authState: targetAuthState});\r\n    }\r\n\r\n    checkUserLogin = () => {\r\n        Auth.currentAuthenticatedUser()\r\n            .then(user => this.changeState('authenticated'))\r\n            .catch(err => this.changeState('signIn'));\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"DmAuthenticator\">\r\n                <Grid container className=\"Fullpage-container\" \r\n                    direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                    <Grid item xs={12} xl={4}>\r\n                        <img src={dmLogo} className=\"Login-logo\" alt=\"logo\" />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <AuthFrame>\r\n                            {(function(authObject) \r\n                                {\r\n                                    switch(authObject.state.authState) \r\n                                    {\r\n                                        case 'signIn':\r\n                                            return <SignIn changeState={authObject.changeState} awsSignIn={authObject.signIn} errObject={authObject.state.childError} changeLanguage={authObject.props.changeLanguage}/>;\r\n                                        case 'signUp':\r\n                                            return <SignUp changeState={authObject.changeState} awsSignUp={authObject.signUp} errObject={authObject.state.childError}/>;\r\n                                        case 'forgetPassword':\r\n                                            return <ForgetPassword changeState={authObject.changeState} awsForgetPassword={authObject.forgetPassword} errObject={authObject.state.childError}/>;\r\n                                        case 'authenticated':\r\n                                            return <App awsSignOut={authObject.signOut}/>;\r\n                                        default:\r\n                                            return null;\r\n                                    }\r\n                                })(this)\r\n                            }\r\n                        </AuthFrame>\r\n                    </Grid>\r\n                </Grid>\r\n                <VerifSignInDialog open={this.state.showVerifCodeDialog} awsVerifyCode={this.verifySignUpCode}  awsResendCode={this.resentSignUpCode} errObject={this.state.verificationSignInError}/>\r\n                <VerifForgetPasswordDialog open={this.state.showVerifPasswordCodeDialog}  awsVerifyPasswordCode={this.verifyForgetPasswordCode} errObject={this.state.verificationForgetPsError}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DmAuthenticator;","import React, { Component } from 'react';\r\nimport { IntlProvider, addLocaleData } from 'react-intl';\r\nimport en from 'react-intl/locale-data/en';\r\nimport ja from 'react-intl/locale-data/ja';\r\nimport zh from 'react-intl/locale-data/zh';\r\n\r\nimport intlMessagesEN from './en.json';\r\nimport intlMessagesZH from './zh.json';\r\nimport intlMessagesJA from './ja.json';\r\n\r\nclass DmIntlProvider extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        addLocaleData([...en,...zh,...ja]);\r\n        this.state = {\r\n            locale: 'en',\r\n            messages: intlMessagesEN \r\n        };\r\n        this.changeLanguage = this.changeLanguage.bind(this);\r\n    }\r\n\r\n    changeLanguage(langCode)\r\n    {\r\n        document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", langCode);\r\n        switch(langCode)\r\n        {\r\n            case \"en\":\r\n                this.setState({\r\n                    locale: langCode,\r\n                    messages: intlMessagesEN\r\n                });\r\n                break;\r\n            case \"zh\":\r\n                this.setState({\r\n                    locale: langCode,\r\n                    messages: intlMessagesZH\r\n                });\r\n                break;\r\n            case \"ja\":\r\n                this.setState({\r\n                    locale: langCode,\r\n                    messages: intlMessagesJA\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    locale: langCode,\r\n                    messages: intlMessagesEN\r\n                });\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <IntlProvider locale={ this.state.locale } messages={this.state.messages}>\r\n                {React.cloneElement(this.props.children, { changeLanguage: this.changeLanguage })}\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DmIntlProvider;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport DmAuthenticator from './authentication/DmAuthenticator';\nimport DmIntlProvider from './languages/DmIntlProvider';\nimport * as serviceWorker from './serviceWorker';\nimport DMTheme from './theme.json';\n\nconst theme = createMuiTheme(DMTheme);\n\nReactDOM.render(<MuiThemeProvider theme={theme}><DmIntlProvider><DmAuthenticator /></DmIntlProvider></MuiThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}